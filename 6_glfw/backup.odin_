package main

import "core:fmt"
import "core:time"
import "core:math"
import "core:c"
import "base:runtime"
import gl "vendor:OpenGL"
import "vendor:glfw"

WIDTH :: 1280
HEIGHT :: 720
GL_MAJOR_VERSION: c.int : 4
GL_MINOR_VERSION:: 6

running: b32 = true

main :: proc() {
	glfw.WindowHint(glfw.RESIZABLE, 1)
	glfw.WindowHint(glfw.CONTEXT_VERSION_MAJOR, GL_MAJOR_VERSION)
	glfw.WindowHint(glfw.CONTEXT_VERSION_MINOR, GL_MINOR_VERSION)
	glfw.WindowHint(glfw.OPENGL_PROFILE, glfw.OPENGL_CORE_PROFILE)

	if glfw.Init() != true {
		fmt.println("Failed to initialize GLFW")
		return
	}
	defer glfw.Terminate()

	window := glfw.CreateWindow(WIDTH, HEIGHT, "Odin GLFW + OpenGL", nil, nil)
	defer glfw.DestroyWindow(window)

	if window == nil {
		fmt.println("Unable to create window")
		return
	}

	glfw.MakeContextCurrent(window)
	glfw.SwapInterval(1) // Enable VSYNC
	glfw.SetKeyCallback(window, key_callback)
	glfw.SetFramebufferSizeCallback(window, size_callback)

	gl.load_up_to(int(GL_MAJOR_VERSION), GL_MINOR_VERSION, glfw.gl_set_proc_address)
	init()

	targetTimeNanos := time.Duration(i64(math.ceil_f64(f64(1.0) / f64(75.0) * f64(1000000000.0))))

	t := time.now()
	for !glfw.WindowShouldClose(window) && running {
		glfw.PollEvents()
		
		update()
		draw()
		glfw.SwapBuffers(window)

		elapsed := time.since(t)
		if elapsed < targetTimeNanos {
			//time.accurate_sleep(targetTimeNanos - elapsed)
		}

		fmt.println(time.since(t))
		t = time.now()

		//glfw.PollEvents()
	}

	exit()
}

init :: proc(){}
update :: proc(){}
draw :: proc() {
	gl.ClearColor(0, 0.3, 0, 1.0)
	gl.Clear(gl.COLOR_BUFFER_BIT)
}

exit :: proc() {}

key_callback :: proc "c" (window: glfw.WindowHandle, key, scancode, action, mods: i32) {
	if key == glfw.KEY_ESCAPE {
		running = false
	}
}

size_callback :: proc "c" (window: glfw.WindowHandle, width, height: i32) {
	gl.Viewport(0, 0, width, height)
}
