#+feature dynamic-literals

package main

import rl "vendor:raylib"
import "ui"
import "core:fmt"
import "core:math"
import "core:time"

WIDTH :: 1000
HEIGHT :: 720

main :: proc() {
	debug := false

	rl.SetConfigFlags({.WINDOW_RESIZABLE})
	rl.InitWindow(WIDTH, HEIGHT, "ui test")
	defer rl.CloseWindow()
	rl.SetTargetFPS(rl.GetMonitorRefreshRate(rl.GetCurrentMonitor()))

	//nBoxes := 7
	nBoxes := 8
	boxes := make([]^ui.Node, nBoxes)
	for i := 0; i < nBoxes; i += 1 {
		ds: ui.DebugSquare
		c: u8 = u8(i) * 20
		ds.color = {c, c, c, 255}

		node := new(ui.Node)
		node.element = ds
		node.w = 1
		node.h = 1
		boxes[i] = node
	}

//	horizSplit1 := ui.horizontal_split_from_nodes(boxes[2:])
//	horizSplit1 := ui.horizontal_split_from_nodes(boxes[3:])

	/*horizSplit1 := ui.horizontal_split_from_nodes(boxes[4:])
	horizSplit1.element.(ui.HorizontalSplit).children[0].preferNotResize = true
	horizSplit1.element.(ui.HorizontalSplit).children[2].preferNotResize = true
	horizSplit1.element.(ui.HorizontalSplit).children[3].preferNotResize = true*/

	horizSplit1 := ui.new_horizontal_split(nil)
	for i := 0; i < 4; i += 1 {
		append_elem(&(&horizSplit1.element.(ui.HorizontalSplit)).children, nil)
	}

	vertSplitMoment := ui.new_vertical_split(nil)
	for i := 0; i < 4; i += 1 {
		append_elem(&(&vertSplitMoment.element.(ui.VerticalSplit)).children, nil)
	}

	vert1 := ui.vertical_split_from_nodes({boxes[0], boxes[1], horizSplit1})
	vert1.element.(ui.VerticalSplit).children[0].preferNotResize = true
	vert1.element.(ui.VerticalSplit).children[0].minimumSize = 74 // correct krita minsize

	vert1.element.(ui.VerticalSplit).children[2].preferNotResize = true
	vert1.element.(ui.VerticalSplit).children[2].minimumSize = 264

	bottomVertSplit := ui.vertical_split_from_nodes(boxes[2:4])

	//horizSplit2 := ui.horizontal_split_from_nodes({vert1, boxes[2]})
	horizSplit2 := ui.horizontal_split_from_nodes({vert1, bottomVertSplit})
	boxes[2].preferNotResize = true

	//rootNode := vert1
	rootNode := horizSplit2

	for i := 0; i < len(horizSplit1.element.(ui.HorizontalSplit).children); i += 1 {
		button := ui.new_button(nil)

		button.minimumSize = 15
		(&button.element.(ui.Button)).pixels_rounded = 6
		vert := ui.vertical_split_from_nodes({button, ui.new_debug_square(nil)})
		vert.parent = rootNode.element.(ui.HorizontalSplit).children[0].element.(ui.VerticalSplit).children[2]
		vert.minimumSize = 15
		vert.element.(ui.VerticalSplit).children[0].preferNotResize = true
		//rootNode.element.(ui.HorizontalSplit).children[0].element.(ui.VerticalSplit).children[2].element.(ui.HorizontalSplit).children[i] = vert
		horizSplit1.element.(ui.HorizontalSplit).children[i] = vert

		button.parent = vert
	}

	append_elem(&(&bottomVertSplit.element.(ui.VerticalSplit)).children, nil)
	bottomVertSplit.element.(ui.VerticalSplit).children[2] = bottomVertSplit.element.(ui.VerticalSplit).children[1]
	bottomVertSplit.element.(ui.VerticalSplit).children[1] = bottomVertSplit.element.(ui.VerticalSplit).children[0]
	vertSplitMoment.parent = bottomVertSplit
	bottomVertSplit.element.(ui.VerticalSplit).children[0] = vertSplitMoment
	for i := 0; i < len(vertSplitMoment.element.(ui.VerticalSplit).children); i += 1 {
		button := ui.new_button(vertSplitMoment)
		button.minimumSize = 15
		(&button.element.(ui.Button)).pixels_rounded = 6
		//button.parent = vertSplitMoment

		vertSplitMoment.element.(ui.VerticalSplit).children[i] = button

		/*iCopy := new(int)
		iCopy^ = i
		(&button.element.(ui.Button)).onClickData = iCopy*/

		buttonCopy := new(^ui.Node)
		buttonCopy^ = button

		(&button.element.(ui.Button)).onClickData = buttonCopy
		(&button.element.(ui.Button)).onClickProc = proc(nodeIn: rawptr) {
			node := (transmute(^^ui.Node)nodeIn)^
			x := ui.index_of_node_in_parent_split(node)
			fmt.println("hello from", x)

		//fmt.println("hello from horiz button #", (transmute(^int)i)^)
		}
	}

	rootNode.w = rl.GetScreenWidth()
	rootNode.h = rl.GetScreenHeight()

	t := time.now()

	ui.scale_up_children(rootNode)
	boxes[2].h = 100

	if debug do fmt.println("scale_up_children()         time:", time.since(t))

	state := ui.ui_state_default_values()
	uiData := ui.init_ui_data()

	i: f64 = 0
	for !rl.WindowShouldClose() {
		i += 0.05
		rl.BeginDrawing()
		rl.ClearBackground({255, 0, 0, 255})

		rootNode.w = rl.GetScreenWidth()
		rootNode.h = rl.GetScreenHeight()

		totalTime := time.now()

		inputs := ui.inputs_from_raylib()
		t = time.now()
		ui.handle_input(rootNode, &state, inputs)
		if debug do fmt.println("handle_input()             time:", time.since(t))

		t = time.now()
		if true || rl.IsKeyPressed(.F5) {
			ui.recompute_children_boxes(rootNode)
		}
		if debug do fmt.println("recompute_children_boxes() time:", time.since(t))

		t = time.now()
		ui.correct_boxes(rootNode, false)
		if debug do fmt.println("correct_boxes(..., false)  time:", time.since(t))

		t = time.now()
		ui.draw(rootNode, &state, &uiData, rl.GetScreenHeight(), inputs)
		if debug do fmt.println("draw()                     time:", time.since(t))

		t = time.now()
		ui.correct_boxes(rootNode, true)
		if debug do fmt.println("correct_boxes(..., true)  time:", time.since(t))
		//fmt.println("root parent:", rootNode.parent)

		if debug do fmt.println("TOTAL                     time:", time.since(totalTime))
		if debug do fmt.println()

		rl.DrawFPS(5, 5)
		rl.EndDrawing()
	}
}
