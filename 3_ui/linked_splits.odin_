package main

import rl "vendor:raylib"
import "ui"
import "core:fmt"

START_WIDTH :: 1280
START_HEIGHT :: 720

main :: proc() {
	rl.SetConfigFlags({.WINDOW_RESIZABLE})
	rl.InitWindow(START_WIDTH, START_HEIGHT, "ui test")
	defer rl.CloseWindow()
	rl.SetTargetFPS(rl.GetMonitorRefreshRate(rl.GetCurrentMonitor()))

	backgroundColor := ui.Color{30, 30, 30, 255}

	left := ui.new_horizontal_split(nil)
	right := ui.new_horizontal_split(nil)

	linkedSplits := []^ui.Node{
		left, right,
	}

	(&left.element.(ui.HorizontalSplit)).linkedSplits = &linkedSplits
	(&right.element.(ui.HorizontalSplit)).linkedSplits = &linkedSplits

	for i := 0; i < 4; i += 1 {
		e1 := ui.new_label_simple(left, "hello world!", .Middle, .Middle)
		e2 := ui.new_label_simple(right, "hello world!", .Middle, .Middle)
		append_elem(&(&left.element.(ui.HorizontalSplit)).children, ui.new_container(left, e1, ui.BACKGROUND_COLOR))
		append_elem(&(&right.element.(ui.HorizontalSplit)).children, ui.new_container(right, e2, ui.BACKGROUND_COLOR))
	}

	rootNode := ui.new_vertical_split_from_nodes(nil, {left, right})

	ui.scale_up_children(rootNode, rl.GetScreenWidth(), rl.GetScreenHeight())

	state := ui.ui_state_default_values()
	platformProcs := ui.get_raylib_platform_procs()
	uiData := ui.init_ui_data(platformProcs)
	
	for !rl.WindowShouldClose() {
		rl.BeginDrawing()
		rl.ClearBackground({255, 0, 0, 255})

		rootNode.w = rl.GetScreenWidth()
		rootNode.h = rl.GetScreenHeight()

		inputs := ui.inputs_from_raylib()
		ui.handle_input(rootNode, &state, platformProcs, inputs)
		ui.recompute_children_boxes(rootNode)
		
		ui.correct_boxes(rootNode, false)
		ui.draw(rootNode, &state, &uiData, rl.GetScreenHeight(), inputs)
		ui.correct_boxes(rootNode, true)

		rl.EndDrawing()
	}
}
